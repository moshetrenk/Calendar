package cal;

import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import javax.swing.*;
import javax.swing.text.BadLocationException;

@SuppressWarnings("serial")
public class NewUser extends JFrame {
    private static JButton enterButton = new JButton();
    private static JLabel titleLabel = new JLabel("<HTML><font face = 'Sitka Heading' size = '6'><I><U>Create User</U></I></font></HTML>", SwingConstants.CENTER), 
    		usernameLabel = new JLabel(), passwordLabel = new JLabel(), passwordLabel2 = new JLabel(), 
    		noMatchLabel = new JLabel(), usernameTaken = new JLabel();
    private static JPasswordField jp1 = new JPasswordField(), jp2 = new JPasswordField();
    private static JTextField inputNameTextBox = new JTextField();
	private static NewUser one;
    private static SQLHelper sqlHelper = new SQLHelper();
	
	public NewUser() {
		//the following checks the operating system and displays the menubar accordingly
    	try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (UnsupportedLookAndFeelException e) {
			e.printStackTrace();
		}

    	String lcOSName = System.getProperty("os.name").toLowerCase();
		boolean IS_MAC = lcOSName.startsWith("mac os x");
		System.setProperty("apple.laf.useScreenMenuBar", String.valueOf(IS_MAC));
        initComponents();

        /* The following is used to close the path of the SQLHelper connection
         * Why this is needed is explained in the comments of the SQLHelper class
         */
        setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                sqlHelper.closePath();
                System.exit(1);
            }
        });
    }    
	
	private void initComponents() {
    	setTitle("New User");
        
    	inputNameTextBox.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                inputNameTextBoxKeyReleased(evt);
            }
        });
        
        jp1.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jp1KeyReleased(evt);
            }
        });
        
        jp2.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jp2KeyReleased(evt);
            }
        });
        
        //allows user to press enter instead of clicking the "Create Account" button
        jp2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	enterButtonActionPerformed(evt);
            }
        });

        usernameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); 
        usernameLabel.setText("Username:");

        passwordLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); 
        passwordLabel.setText("Password:");

        passwordLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        passwordLabel2.setText("Verify Password:");

        enterButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        enterButton.setText("Create Account");
        enterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                enterButtonMouseClicked(evt);
            }
        });
        enterButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                enterButtonActionPerformed(evt);
            }
        });

        noMatchLabel.setForeground(new java.awt.Color(204, 0, 0));
        noMatchLabel.setText("Passwords do not match");
        noMatchLabel.setVisible(false);
        usernameTaken.setForeground(new java.awt.Color(204, 0, 0));
        usernameTaken.setText("That username is already taken");
        usernameTaken.setVisible(false);
        
        //(mostly) autogenerated code starts here
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(passwordLabel2, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(passwordLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usernameLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap( LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.TRAILING)
                    .addComponent(jp2, GroupLayout.PREFERRED_SIZE, 138, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jp1, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 138, GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputNameTextBox, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 138, GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(enterButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(titleLabel, GroupLayout.PREFERRED_SIZE, 171, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup( GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap( GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.LEADING)
                    .addComponent(usernameTaken, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE)
                    .addComponent(noMatchLabel, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup( GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputNameTextBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(usernameLabel)
                        .addGap(3, 3, 3)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE)
                    .addComponent(jp1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE)
                    .addComponent(jp2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(usernameTaken)
                .addGap(2, 2, 2)
                .addComponent(noMatchLabel)
                .addGap(18, 18, 18)
                .addComponent(enterButton, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                .addContainerGap()
                .addGap(30, 30, 30))
        );
        
        setResizable(false);
        pack();
    }   //autogenerated code ends here             
	
	private static void jp1KeyReleased(KeyEvent evt) {
		if(String.valueOf(jp1.getPassword()).length() >= 16){
            jp1.setText(String.valueOf(jp1.getPassword()).substring(0, 16));
        }
	}   
	
	private static void jp2KeyReleased(KeyEvent evt) {
		if(String.valueOf(jp2.getPassword()).length() >= 16){
            jp2.setText(String.valueOf(jp2.getPassword()).substring(0, 16));
        }
		
		/* if the user is entering their password into the confirm password field and they entered at least
		 * as many characters as there are in the main enter password field then if the passwords do not 
		 * match, let the user know
		 */
		if (!(new String(jp1.getPassword()).equals(new String(jp2.getPassword()))) && jp1.getPassword().length <= jp2.getPassword().length){
	    	noMatchLabel.setVisible(true);
	    }
	    else {
	    	noMatchLabel.setVisible(false);
	    }
	}   
	
    private static void enterButtonMouseClicked(MouseEvent evt) {                                      
        //do not remove, allows enter button to replace clicking, user friendly shit.
    }                                     

    private static void inputNameTextBoxKeyReleased(KeyEvent evt) {
	    	if(inputNameTextBox.getText().length() >= 16){
	            try{
	            inputNameTextBox.setText(inputNameTextBox.getText(0, 16));
	            }catch (BadLocationException e) {
	                e.printStackTrace();
	            }
	        }
	    	
    		usernameTaken.setText("That username is already taken");
    		/* sorry for the enormous "if" statement
    		 * in english it asks if the lowercase form of the user's input for the username
    		 * is returned by the database when a username of that value is queried. If it
    		 * is returned then that username already exists so set the label to true, 
    		 * otherwise set it to false (which it probably will already be but just in case
    		 * the user tried an invalid username, set it back to false)
    		 */
	    	if((inputNameTextBox.getText().toLowerCase())
	    			.equals(
	    			(SQLHelper.getUsername(
	    					inputNameTextBox.getText())).toLowerCase())
	    			)
	    		usernameTaken.setVisible(true);
	    	else 
	    		usernameTaken.setVisible(false);
    }     

    private static void enterButtonActionPerformed(ActionEvent evt) {  
    	if ((inputNameTextBox.getText()).equals("")){
    		usernameTaken.setText("You must enter a username");
    		usernameTaken.setVisible(true);
	    }
	    
	    //if the username is entered and the passwords match then...
    	if (!noMatchLabel.isVisible() && !usernameTaken.isVisible()){
    		//insert the username and encrypted password into the database
    		//go to the profile screen and output a welcome message
    		sqlHelper.insertUsernamePassword(
    				inputNameTextBox.getText(), 
    				sqlHelper.encrypt(new String(jp1.getPassword()))
    				);
    		try {
				Profile.paintFrame(new User(inputNameTextBox.getText()));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
      		
    		one.rootPane.repaint();
      		one.setVisible(false);
    		
    		SelfClosingMessage.output("Welcome!", "", 2500);
    	}
    }                                                                 

    public static void paintFrame(){
    	 java.awt.EventQueue.invokeLater(new Runnable() {
            @SuppressWarnings("static-access")
			public void run() {
            	 one = new NewUser();
            	 JFrame frame = (JFrame) SwingUtilities.getRoot(jp1);
               	 one.centerWindow(frame);
                 one.setVisible(true);
             }
         });
    }

    public static void centerWindow(Window frame){
	   	Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
	   	int x = (int) ((dimension.getWidth() - frame.getWidth())/2);
	   	int y = (int) ((dimension.getHeight() - frame.getHeight())/2);
	   	
	   	frame.setLocation(x, y);
    }
    
    public static void main(String args[]) {
          try {
            for ( UIManager.LookAndFeelInfo info :  UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                     UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch ( UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                paintFrame();
                
            }
        });
    }
}
